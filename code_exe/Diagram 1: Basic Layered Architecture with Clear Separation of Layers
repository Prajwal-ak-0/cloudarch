# Diagram 1: Basic Layered Architecture with Clear Separation of Layers
from diagrams import Diagram, Cluster, Edge
from diagrams.azure.compute import FunctionApps, VM
from diagrams.azure.ml import MachineLearningServiceWorkspaces, CognitiveServices
from diagrams.azure.network import LoadBalancers, ApplicationGateway, VirtualNetworks
from diagrams.azure.database import CosmosDb
from diagrams.azure.integration import APIManagement, EventGridTopics
from diagrams.azure.storage import DataLakeStorage

with Diagram("Layered Architecture for DocuExtract", show=False, direction='LR'):
    user = EventGridTopics("User Interface")

    with Cluster("Frontend"):
        gateway = ApplicationGateway("API Gateway")
        user >> gateway

    with Cluster("Backend"):
        api_management = APIManagement("Backend API")
        function_app = FunctionApps("Document Processor")

    with Cluster("Machine Learning"):
        ml_service = MachineLearningServiceWorkspaces("ML Embedding Model")
        ml_rerank = CognitiveServices("ML Reranking Model")

    with Cluster("Storage"):
        vector_storage = CosmosDb("Vector DB")
        data_storage = DataLakeStorage("Data Lake")

    with Cluster("Network"):
        lb = LoadBalancers("Load Balancer")
        vnet = VirtualNetworks("Virtual Network")

    # Connections
    gateway >> api_management >> function_app
    function_app >> Edge(label="process") >> [ml_service, ml_rerank]
    api_management << function_app
    function_app >> vector_storage
    vector_storage << ml_rerank
    function_app >> data_storage
    user << Edge(label="CSV download") << function_app

    # Network Layer
    user << lb
    lb << vnet << [gateway, api_management, function_app]

# Diagram 2: Highlighting Data Flow and Interactions
from diagrams import Diagram, Cluster, Edge
from diagrams.azure.compute import FunctionApps, KubernetesServices
from diagrams.azure.ml import MachineLearningServiceWorkspaces, BatchAI
from diagrams.azure.network import TrafficManagerProfiles, CDNProfiles
from diagrams.azure.database import CosmosDb
from diagrams.azure.integration import EventGridTopics, LogicApps
from diagrams.azure.storage import StorageAccounts

with Diagram("Data Flow Architecture for DocuExtract", show=False, direction='LR'):
    client = EventGridTopics("Client")

    with Cluster("Web Layer"):
        traffic_manager = TrafficManagerProfiles("Traffic Manager")
        cdn = CDNProfiles("Content Delivery Network")

    with Cluster("API Layer"):
        api_logic = LogicApps("API Logic")
        doc_processor = FunctionApps("Document Processor")

    with Cluster("ML Layer"):
        doc_embeddings = MachineLearningServiceWorkspaces("Document Embeddings")
        field_extractor = BatchAI("Field Extractor")

    with Cluster("Database Layer"):
        vector_db = CosmosDb("Vector Database")

    with Cluster("Storage Layer"):
        storage_account = StorageAccounts("Persistent Storage")

    # Connections
    client >> traffic_manager >> cdn
    cdn >> api_logic >> doc_processor
    doc_processor >> [doc_embeddings, field_extractor]
    vector_db << field_extractor
    doc_processor >> storage_account
    storage_account >> client

# Diagram 3: Grouping by Functions and Responsibilities
from diagrams import Diagram, Cluster, Edge
from diagrams.azure.compute import KubernetesServices, AppServices
from diagrams.azure.ml import BotServices, MachineLearningStudioWebServices
from diagrams.azure.network import DNSZones, ExpressrouteCircuits
from diagrams.azure.database import DataExplorerClusters
from diagrams.azure.integration import ServiceBus, PartnerTopic
from diagrams.azure.storage import StorageExplorer

with Diagram("Functional Grouping Architecture for DocuExtract", show=False, direction='LR'):
    ui = PartnerTopic("UI")

    with Cluster("API Gateway"):
        dns = DNSZones("DNS")
        expressroute = ExpressrouteCircuits("Express Route")

    with Cluster("Processing Components"):
        web_service = MachineLearningStudioWebServices("Web Service")
        app_service = AppServices("App Service")

    with Cluster("Machine Learning Resources"):
        nlp_model = BotServices("NLP Model")
        model_execution = KubernetesServices("Model Execution")

    with Cluster("Data Management"):
        data_storage = StorageExplorer("Data Storage")
        data_cluster = DataExplorerClusters("Data Cluster")

    with Cluster("Messaging Services"):
        message_bus = ServiceBus("Service Bus")

    # Connections
    ui >> dns >> expressroute >> web_service >> app_service
    app_service >> model_execution >> nlp_model
    app_service >> data_cluster >> data_storage
    ui << message_bus << data_storage